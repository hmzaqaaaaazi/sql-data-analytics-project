--- 1 step (Database Exploration)

-- Explore all objects in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES;


-- Explore all the columns in the database

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_products';

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'fact_sales';

--- 2 step (Dimension Exploration)

-- go through the tables and find the dimensions that can be grouped or segemented in such a way that it is useful for later analysis.

-- Explore all the countries our customers come from.
SELECT DISTINCT(country) FROM gold.dim_customers;

-- Explore all the categories "The major divisions"

SELECT DISTINCT category, sub_category, product_name FROM gold.dim_products
ORDER BY category;

--- 3 step (Date Exploration)

-- find the date of first and last order
-- How many years of sales are available

SELECT MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date,
EXTRACT(YEAR FROM MAX(order_date)) - EXTRACT(YEAR FROM MIN(order_date)) AS order_range_year
FROM gold.fact_sales;

-- Find the youngest and oldest customers 
SELECT MIN(birthdate) AS youngest, MAX(birthdate) AS oldest,
EXTRACT(YEAR FROM AGE(CURRENT_DATE, MIN(birthdate))) AS oldest_age_years,
EXTRACT(YEAR FROM AGE(CURRENT_DATE, MAX(birthdate))) AS youngest_age_years
FROM gold.dim_customers;

--- 4 step (Measures Exploration)

-- Find the total sales?

SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales;

-- Find how many items are sold?

SELECT SUM(quantity) AS total_quantity FROM gold.fact_sales;

-- Find the average selling price?

SELECT AVG(price) AS average_price FROM gold.fact_sales;

-- Find the total number of orders?

SELECT COUNT(order_number) AS total_order FROM gold.fact_sales;
SELECT COUNT(DISTINCT(order_number)) AS total_order FROM gold.fact_sales;

-- Find the total number of products?

SELECT COUNT(DISTINCT(product_name)) AS total_products FROM gold.dim_products;

-- Find the total number of customers?

SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers;

-- Find the total number of customers that has placed the order?

SELECT COUNT(DISTINCT(customer_key)) AS total_customers FROM gold.fact_sales;

-- Generate a report that shows all the key metrics of the business.

SELECT 'Total_Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_quantity' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average_price' AS measure_name, AVG(price) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_Nr_orders' AS measure_name, COUNT(DISTINCT(order_number)) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_Nr_products' AS measure_name, COUNT(product_name) AS measure_value FROM gold.dim_products
UNION ALL
SELECT 'Total_Nr_customers' AS measure_name, COUNT(customer_key) AS measure_value FROM gold.dim_customers;


--- Step 5 (Magnitude)

-- Find total customers by countries?

SELECT country, COUNT(customer_key) AS total_customers 
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;


-- Find total customers by gender?

SELECT gender, COUNT(customer_key) AS total_customers 
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Find total products by category?

SELECT category, COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

-- What is the average cost in each category?

SELECT category, AVG(cost) AS average_price
FROM gold.dim_products
GROUP BY category
ORDER BY average_price DESC;

-- WHat is the total revenue generated for each category?

SELECT
    p.category,
    SUM(f.sales_amount) AS total_revenue
FROM
gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p ON f.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue;
-- Find the total revenue generated by each customer?

SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM
gold.fact_sales AS f
LEFT JOIN gold.dim_customers AS c ON f.customer_key = c.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC;

-- What is the distribution of sold items across countries?


SELECT
    c.country,
    SUM(f.quantity) AS total_sold_items
FROM
gold.fact_sales AS f
LEFT JOIN gold.dim_customers AS c ON f.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;


--- Step 6 Ranking 

-- Which 5 products generate highest revenue?

SELECT
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM
gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;


-- using window functions
SELECT
* FROM (
SELECT
    p.product_name,
    SUM(f.sales_amount) AS total_revenue,
    ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
FROM
gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p ON f.product_key = p.product_key
GROUP BY p.product_name)
WHERE rank_products <= 5;

-- What are the 5 worst-performing products in terms of sales?


SELECT
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM
gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue ASC
LIMIT 5;



-- using window functions

SELECT
* FROM (
SELECT
    p.product_name,
    SUM(f.sales_amount) AS total_revenue,
    ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) ASC) AS rank_products
FROM
gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p ON f.product_key = p.product_key
GROUP BY p.product_name)
WHERE rank_products <= 5;
